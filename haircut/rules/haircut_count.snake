""" Snakerules for counting haircut single cell data """ 
import os
import glob

def get_read_id(fq_path):
    
    fq = os.path.basename(fq_path)
    fq = fq.replace("_001.fastq.gz", "")
    read_id = fq[-2:]
    return read_id

def _get_fastqs(wildcards):

    data_dir = HAIRCUT_DATA
    fqs = glob.glob(os.path.join(data_dir, wildcards.sample) + "*.gz")
    
    if len(fqs) == 0:
        sys.exit("fastqs could not be found in directory {}".format(data_dir))
    
    path_to_fqs = [os.path.join(data_dir, x) for x in fqs]

    
    if len(path_to_fqs) > 2:
        sys.exit("More than 2 fastqs found for sample {}".format(wildcards.sample))
     
    fq_order = ["R1", "R2"]
    
    # sort to ensure that read 1 is first in list
    path_to_fqs = sorted(path_to_fqs, key=lambda k: fq_order.index(get_read_id(k)))
    
    print("processing the following fastqs with the haircut pipeline",
      file = sys.stderr)
    print("input fastq\tsample", file = sys.stderr) 
    for fq in path_to_fqs:
      print("{}\t{}".format(fq, wildcards.sample), file = sys.stderr)
    
    return path_to_fqs

def _get_barcodes(wildcards):
    """ get whitelisted barcodes from 10x run """
    hcut_sample_id = wildcards.sample
    mrna_sample_id = hc_to_10x_map[hcut_sample_id]

    barcodes_path = os.path.join(wildcards.data, 
                                 "10x_mrna",
                                 mrna_sample_id,
                                 "outs",
                                 "filtered_feature_bc_matrix",
                                 "barcodes.tsv.gz")
    
    return barcodes_path

rule extract_umi_barcode:
    """
    extract umi and cell barcode from read 1 
    """
    input:
      _get_fastqs
    output:
      R1 = "{data}/fastqs/{sample}_R1_umi.fastq.gz",
      R2 = "{data}/fastqs/{sample}_R2_umi.fastq.gz" 
    params:
      bc_pattern = "CCCCCCCCCCCCCCCCNNNNNNNNNN",
      job_name = "{sample}.get_umi",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/extract_umi/{sample}.out"
    threads: 2 # for gzip
    resources: all_threads=2
    shell:
      """
      umi_tools extract \
        --bc-pattern {params.bc_pattern} \
        --stdin {input[0]} \
        --stdout {output.R1} \
        --read2-in {input[1]} \
        --read2-out={output.R2}
      """ 

rule trim:
    """
    trim tso and polyA
    """
    input:
      "{data}/fastqs/{sample}_R2_umi.fastq.gz"
    output:
      "{data}/fastqs/{sample}_R2_umi_trimmed.fastq.gz"
    params:
      adapter3p = " -a AAAAAAAAAAA ",
      adapter5p = " -g AAGCAGTGGTATCAACGCAGAGTACATGGG ",
      other_options = " --minimum-length=2 ",
      job_name = "{sample}.trim",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/trim/{sample}.out"
    threads: 2 # for gzip
    resources: all_threads=2
    shell:
      """
      cutadapt \
        {params.adapter3p} \
        {params.adapter5p} \
        {params.other_options} \
        -o {output} \
        {input}
      """

rule bowtie_align:
    """
    run bowtie2
    """
    input:
      idx = HAIRCUT_FASTA.rsplit('.', 1)[0] + ".1.bt2",
      R1 = "{data}/fastqs/{sample}_R2_umi_trimmed.fastq.gz",
    output:
      bam = os.path.join("{data}", "bam", "{sample}_haircut.bam")
    params:
      settings = " --norc ",
      idx = HAIRCUT_FASTA.rsplit('.', 1)[0], 
      job_name = "{sample}.bt2",
      memory = "select[mem>30] rusage[mem=30]",
    log:
      os.path.join("logs", "bowtie2_align", "{sample}")
    threads: 12
    resources: all_threads=12
    shell:
      """
        bowtie2 \
          -x {params.idx} \
          --threads {threads} \
          {params.settings} \
          {input.R1} \
          | samtools view -bS \
          | samtools sort -@ 11 \
          > {output.bam}  

      """

rule bowtie_idx:
    """
    build bowtie2 index
    """
    input:
      HAIRCUT_FASTA
    output:
      HAIRCUT_FASTA.rsplit('.', 1)[0] + ".1.bt2"
    params:
      idx = HAIRCUT_FASTA.rsplit('.', 1)[0], 
      job_name = "bt2_idx",
      memory = "select[mem>30] rusage[mem=30]",
    log:
      os.path.join("logs", "bowtie2_index", "log.txt")
    threads: 12
    resources: all_threads=12
    shell:
      """
      bowtie2-build \
        --threads {threads} \
        {input} \
        {params.idx} 
      """

rule append_tag:
    """
    add XT tag with chrom + pos
    """
    input:
      bam = os.path.join("{data}", "bam", "{sample}_haircut.bam")
    output:
      bam = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam"),
      bai = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam.bai")
    params:
      job_name = "{sample}.tag",
      memory = "select[mem>4] rusage[mem=4]",
    log:
      os.path.join("logs", "tag_sample", "{sample}")
    threads: 1
    resources: all_threads=1
    shell:
      """
      {SRC}/tag_bam {input.bam} {output.bam} "_" 2 3
      
      samtools index {output.bam}
      """

rule add_umis_to_bam:
    """
    identify and add UMI groups to bam as tag.
    """
    input:
      bam = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam"),
      bai = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam.bai")
    output:
      bam = temp(os.path.join("{data}", "bam", "{sample}_haircut_umitagged.bam")),
    params:
      job_name = "{sample}.group",
      memory = "select[mem>32] rusage[mem=32]",
    log:
      os.path.join("logs", "group_sample", "{sample}")
    threads: 2
    resources: all_threads=2
    shell:
      """
      umi_tools group \
        --read-length True \
        --per-cell \
        -I {input.bam} \
        --output-bam True \
        --output-unmapped True \
        -S {output.bam}
      """
   
rule sort_by_cb:
    """
    sort bam by cell barcode tag 
    """
    input:
      bam = os.path.join("{data}", "bam", "{sample}_haircut_umitagged.bam"),
    output:
      bam = os.path.join("{data}", "bam", "{sample}_haircut_umitagged_sorted.bam")
    params:
      cbtag = "CB" ,
      job_name = "{sample}.sort",
      memory = "select[mem>120] rusage[mem=120]",
    log:
      os.path.join("logs", "sort_sample", "{sample}")
    threads: 24
    resources: all_threads=24
    shell:
      """
      samtools sort \
          -t {params.cbtag} \
          -@ 23 \
          -o {output.bam} \
          {input.bam} 
      """

rule count_umis:
    """
    count up umis
    """
    input:
      bam = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam"),
      bai = os.path.join("{data}", "bam", "{sample}_haircut_tagged.bam.bai")
    output:
      os.path.join("{data}", "counts", "{sample}", "umitools_counts.tsv.gz")
    params:
      job_name = "{sample}.count",
      memory = "select[mem>16] rusage[mem=16]",
    log:
      os.path.join("logs", "count_sample", "{sample}")
    threads: 2
    resources: all_threads=2
    shell:
      """
      umi_tools count \
        --per-gene \
        --gene-tag=XT \
        --per-cell \
        -I {input} \
        -S {output} 
      """

rule make_mtx_format:
  """
  convert umitools flat file to mtx sparseMatrix format
  """
  input:
    os.path.join("{data}", "counts", "{sample}", "umitools_counts.tsv.gz")
  output:
    mtx = os.path.join("{data}", "counts", "{sample}", "unfiltered", "matrix.mtx.gz"),
    features = os.path.join("{data}", "counts", "{sample}", "unfiltered", "features.tsv.gz"),
    bcs = os.path.join("{data}", "counts", "{sample}", "unfiltered", "barcodes.tsv.gz"),
  params:
    outdir = os.path.join("{data}", "counts", "{sample}", "unfiltered"),
    job_name = "{sample}.convert",
    memory = "select[mem>16] rusage[mem=16]",
  log:
    os.path.join("logs", "count_sample", "{sample}")
  threads: 1
  resources: all_threads=1
  shell:
    """
    R -e 'scrunchy::umitools_to_mtx("{input}", "{params.outdir}")' 
    """

rule make_molecule_files:
  """
  convert umitools flat file to mtx sparseMatrix format
  """
  input:
    bam = os.path.join("{data}", "bam", "{sample}_haircut_umitagged_sorted.bam")
  output:
    os.path.join("{data}", "molecules", "{sample}", "molecules.tsv.gz"),
    os.path.join("{data}", "molecules", "{sample}", "features.tsv.gz"),
    os.path.join("{data}", "molecules", "{sample}", "barcodes.tsv.gz"),
  params:
    outdir = os.path.join("{data}", "molecules", "{sample}"),
    tmpmat = os.path.join("{data}", "molecules", "{sample}", "molecules.tsv"),
    tmpfeatures = os.path.join("{data}", "molecules", "{sample}", "features.tsv"),
    tmpbarcodes = os.path.join("{data}", "molecules", "{sample}", "barcodes.tsv"),
    job_name = "{sample}.convert",
    memory = "select[mem>16] rusage[mem=16]",
  log:
    os.path.join("logs", "count_sample", "{sample}")
  threads: 1
  resources: all_threads=1
  shell:
    """
    {SRC}/get_molecule_info {input.bam} {params.outdir}
    gzip {params.tmpmat}
    gzip {params.tmpfeatures}
    gzip {params.tmpbarcodes}
    """

rule make_filtered_matrix:
  """
  filter matrix to keep only cell barcodes 
  """
  input:
    mtx = os.path.join("{data}", "counts", "{sample}", "unfiltered", "matrix.mtx.gz"),
    features = os.path.join("{data}", "counts", "{sample}", "unfiltered", "features.tsv.gz"),
    bcs = os.path.join("{data}", "counts", "{sample}", "unfiltered", "barcodes.tsv.gz"),
    count_cmd = lambda wildcards: os.path.join(DATA, "10x_mrna", "logs", hc_to_10x_map[wildcards.sample] + "_complete.txt")
  output:
    os.path.join("{data}", "counts", "{sample}", "filtered", "matrix.mtx.gz"),
    os.path.join("{data}", "counts", "{sample}", "filtered", "features.tsv.gz"),
    os.path.join("{data}", "counts", "{sample}", "filtered", "barcodes.tsv.gz"),
  params:
    mrna_bcs = _get_barcodes,
    indir = os.path.join("{data}", "counts", "{sample}", "unfiltered"),
    outdir = os.path.join("{data}", "counts", "{sample}", "filtered"),
    job_name = "{sample}.filter",
    memory = "select[mem>16] rusage[mem=16]",
  log:
    os.path.join("logs", "filter_sample", "{sample}")
  threads: 1
  resources: all_threads=1
  shell:
    """
    R -e 'scrunchy::filter_matrix("{params.indir}","{params.mrna_bcs}", "{params.outdir}")' 
    """
