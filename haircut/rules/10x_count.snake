import os 
import re
import glob

""" Snakerules for running 10x cellranger """

def _collect_groups(wildcards):
    """generate a csv file with path to molecule_info.h5 for each expt
    group. Return group_id and path to csv as a list """
     
    groups = wildcards.expt_groups
    data = wildcards.data

    groups = groups.split(",")
    outdir = os.path.join(data, "results")

    out = open(groups[0] + "_groups_def.csv", 'w')
    out.write("library_id,molecule_h5\n")
    for group in groups: 
        if group is "":
            continue
        library = group.strip(" ")
        path = os.path.join(outdir, library, "outs", "molecule_info.h5")
        out.write("{},{}\n".format(library, path))
    
    out.close()
    # return list with group id and path to csv
    return [groups[0][:-1] + "_aggr", groups[0] + "_groups_def.csv"]


def _get_sample_ids(wildcards):
    """ extract out sample prefixes from fastqs to pass to cellranger
    i.e. given the following fastqs
    sample_name_1_S1_L001_R1_001.fastq.gz"
    sample_name_2_S2_L001_R1_001.fastq.gz"
    sample_name_3_S3_L001_R1_001.fastq.gz"

    return:
    sample_name_1,sample_name_2,sample_name_3
    """

    no_lane = "_S[0-9]+_[RI][12]_001\.fastq\.gz$"
    lane = "_S[0-9]+_L[0-9]{3}_[RI][12]_001\.fastq\.gz$"

    fq_dir = os.path.join(wildcards.data, "raw_data")          
    fqs = glob.glob(os.path.join(fq_dir, wildcards.sample + "*"))
    R1_fqs = [x for x in fqs if "R1" in x]
    R1_fqs = [os.path.basename(x) for x in R1_fqs]

    sample_ids = set()
    for fq in R1_fqs:
      if re.search(lane, fq) is not None:
        sample_id = re.sub(lane, "", fq)
        sample_ids.add(sample_id)

      elif re.search(no_lane, fq) is not None:
        # Novaseq style S1 flowcell
        sample_id = re.sub(no_lane, "", fq)
        sample_ids.add(sample_id)
      else:
        sys.exit("unable to parse out sample id from {}".format(fq))

    return ",".join(sample_ids)

def _get_sample_fq_paths(wildcards):
    """ generate list of fastqs that contain sample prefix 
    """
    
    sample_ids = _get_sample_ids(wildcards)
    sample_ids = sample_ids.split(",")

    fq_dir = os.path.join(wildcards.data, "raw_data")          
    input_fqs = set()
    for sample in sample_ids:
      
      r1_pattern = sample + "*" + "R1_001.fastq.gz"
      
      r1s = glob.glob(os.path.join(fq_dir, r1_pattern))
      r2s = [re.sub("_R1_001.fastq.gz$", "_R2_001.fastq.gz", x) for x in r1s] 
      reads = r1s + r2s
      for read in reads:
        input_fqs.add(read)
    
    print("running cellranger on the following fqs\nfastq\tsample", file = sys.stderr) 
    for fq in input_fqs:
      print("{}\t{}".format(fq, wildcards.sample), file = sys.stderr)

    return input_fqs

rule cellranger_count:
    """ note that cellranger count will fail if the output directory
    specified with ``--id`` exists prior to running. By default Snakemake 
    will generate directories listed in the input and output params, so to
    avoid this error this rule creates a dummy file "{sample}_complete.txt """

    input:
      _get_sample_fq_paths
    output:
      "{data}/results/logs/{sample}_complete.txt"
    params:
      fqs = _get_sample_ids,
      outdir = "{data}/results/",
      indir = os.path.join("{data}","raw_data"),
      job_name = "count",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/{sample}_count.out"
    threads: 2
    shell:
      """
      set -x
      echo {params.fqs}
      cellranger count \
          --id={wildcards.sample} \
          --fastqs={params.indir} \
          --sample={params.fqs} \
          --jobmode=lsf \
          --project={PROJECT} \
          --maxjobs={MAX_10X_JOBS} \
          --transcriptome={TRANSCRIPTOME}

      mkdir -p {params.outdir}
      mv -u {wildcards.sample} {params.outdir}
      
      # test if output bam file produced by count
      bam="{params.outdir}{wildcards.sample}/outs/possorted_genome_bam.bam" 

      if [ -s $bam ] 
        then 
        echo "finished" > {output}
      fi
      """ 

rule cellranger_aggr:
    input:
      expand("{data}/results/logs/{sample}_complete.txt",
        sample = SAMPLES, 
        data = DATA),
    output:
      "{data}/results/logs/{expt_groups}_aggr_complete.out.txt"
    params:
      groups = _collect_groups,
      outdir = "{data}/results/",
      job_name = "aggr",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/{expt_groups}_aggr.out"
    threads: 2
    shell:
      """
      set -x
      cellranger aggr \
          --csv={params.groups[1]} \
          --id={params.groups[0]} \
          --jobmode=lsf \
          --maxjobs={MAX_10X_JOBS} 
      
      mkdir -p {params.outdir}
      mv -u {params.groups[0]} {params.outdir}
      mv -i {params.groups[1]} {params.outdir}      
      
      summary_html="{params.outdir}{params.groups[0]}/outs/web_summary.html"
      if [ -s $summary_html ]
      then
        echo "finished" > {output}
      fi
      """ 
